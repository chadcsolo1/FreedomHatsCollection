<div class="col-6 border p-3" @onclick="()=> ProductSelected(product.Id)">
    <h2 class="text-primary">@product.Name - @product.Id</h2>
    <button class="btn btn-success" type="button">Create</button> <br />
    Add to Favorites: <input type="checkbox" @onchange="FavoritesUpdated" /> <br />
    Show Properties: <input type="checkbox" value="true" @bind="@product.ShowProperties" />
    <table class="table table-striped">
        <thead>
            <tr>
                <td>Name</td>
                <td>Description</td>
                <td>Price</td>
                <td>IsActive</td>
                @if (product.ShowProperties)
                {
                    <td>Styles</td>
                }
                @if (product.ShowProperties)
                {
                    <td>Sizes</td>
                }
                @if (product.ShowProperties)
                {
                    <td>Colors</td>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@product.Name</td>
                <td>@product.ProductDescription</td>
                <td>@product.Price</td>
                <td>@(product.IsActive ? "Active" : "InActive")</td>
                <td>
                    @if (product.ShowProperties)
                    {
                        foreach (var prop in product.Style)
                        {
                            <p>@prop.Value</p>
                        }
                    }
                </td>
                <td>
                    @if (product.ShowProperties)
                    {
                        foreach (var prop in product.Size)
                        {
                            <p>@prop.Value</p>
                        }
                    }
                </td>
                <td>
                    @if (product.ShowProperties)
                    {
                        foreach (var prop in product.Color)
                        {
                            <p>@prop.Value</p>
                        }
                    }
                </td>
                <td><button class="btn btn-primary">Edit</button></td>
                <td>
                    <_DeleteButton productId="@product.Id" />
                </td>
                @* <td><button class="btn btn-danger"  @onclick="()=>DeleteProd(product.Id)">Delete</button></td> *@
            </tr>
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public Product product { get; set; } = new();

    //OnParametersSet() : Two main use cases 1. called when component is first initialized. 2. each time new or updated parameters are received from parent in the render tree
    //One use case for this application : Since the product is a parameter here OnParameterSet() will be called if one of the products is updated.
    protected override void OnParametersSet()
    {
        
    }

    //There are two ways to use the event callback.
    //1. When you need to pass some value to the parent component.
    //2. When you just need to invoke a function in the parent component without any information passed up from the child component.
    //In case 1, you need the Task/Method like FavoritesUpdated or ProductSelected below
    //In case 2, you just need to create the callback and reference the callback in the event definiton like @onclick="OnFavoritesUpdate"
    [Parameter]
    public EventCallback<bool> OnFavoritesUpdated { get; set; }

    private async Task FavoritesUpdated(ChangeEventArgs args)
    {
        await OnFavoritesUpdated.InvokeAsync((bool)(args.Value?? false));
    }

    [Parameter]
    public EventCallback<int> OnProductSelect { get; set; }

    private async Task ProductSelected(int id)
    {
        await OnProductSelect.InvokeAsync(product.Id);
    }
}
