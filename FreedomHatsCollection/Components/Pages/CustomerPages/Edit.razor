@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using FreedomHatsCollection.Models
@inject IDbContextFactory<FreedomHatsCollection.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Customer</h2>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Customer.FirstName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Customer.LastName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="Customer.Password" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Customer.Address" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">DateOfBirth:</label>
                    <InputDate id="dateofbirth" @bind-Value="Customer.DateOfBirth" class="form-control" />
                    <ValidationMessage For="() => Customer.DateOfBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountcreationdate" class="form-label">AccountCreationDate:</label>
                    <InputDate id="accountcreationdate" @bind-Value="Customer.AccountCreationDate" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Customer.AccountCreationDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountupdateddate" class="form-label">AccountUpdatedDate:</label>
                    <InputDate id="accountupdateddate" @bind-Value="Customer.AccountUpdatedDate" class="form-control" />
                    <ValidationMessage For="() => Customer.AccountUpdatedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountstatus" class="form-label">AccountStatus:</label>
                    <InputText id="accountstatus" @bind-Value="Customer.AccountStatus" class="form-control" />
                    <ValidationMessage For="() => Customer.AccountStatus" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Customer? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Customer ??= await context.Customers.FirstOrDefaultAsync(m => m.Id == Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Customer!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(Customer!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customers.Any(e => e.Id == id);
    }
}
