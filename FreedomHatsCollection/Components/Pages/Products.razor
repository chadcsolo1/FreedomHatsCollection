@page "/freedomhatscollection/products"
@inject NavigationManager NavigationManager



<h3>Products</h3>
<p>Favorite Count: @favoritesCount</p>

<div class="col-6 border p-3">
    <h2>Product Details</h2>
    <hr />
    @if (productToDisplay != null)
    {
        <h3>@productToDisplay.Name</h3>
        <p>@productToDisplay.ProductDescription</p>
        <p>Price: @productToDisplay.Price</p>
        <p>IsActive: @(productToDisplay.IsActive ? "Active" : "InActive")</p> <br />
        <button @onclick="NavigateToShoppingCart">Buy</button>
    }
</div>

@foreach (var product in productsList)
{
    <_ProductCard product="product" OnFavoritesUpdated="FavoritesCountChange" OnProductSelect="ProductToDisplay" />
}

@* <Grid TItem="Product"
    Class="table table-hover table-bordered table-stripped"
    >

</Grid> *@






@code {
    public int favoritesCount { get; set; } = 0;
    public Product productToDisplay { get; set; }
    List<Product> productsList = new();




    Product product = new()
        {
            Id = 1,
            Name = "Freedom Hat",
            ProductDescription = "A hat that represents freedom.",
            Price = 19.99,
            IsActive = true,
            ShowProperties = false,
            Styles = Style.Snapback,
            Sizes = Size.Medium,
            Colors = Color.Gray
        };

    //OnAfterRender(bool firstRender) : Runs after the DOM has been fully rendered so after OnInitialized().
    //Use Case: If you need to do something after the component has been rendered. For example, if you need to call a JS function to manipulate the DOM.
    //Use Case: You might call an eventcallback that needed the DOM to be fully rendered.

    //OnInitializedAsync
    //OnInitialized : runs code inside when the component is completely loaded.
    //Common uses => Load data : so you may call an endpoint or have a call to the DB which will be kicked off as soon as the component is navigated to.
    protected override void OnInitialized()
    {

        productsList.Add(new()
            {

                Id = 1,
                Name = "Freedom Hat",
                ProductDescription = "A hat that represents freedom",
                Price = 19.99,
                IsActive = true,
                ShowProperties = false,
                Styles = Style.DadHat,
                Sizes = Size.Medium,
                Colors = Color.Red,
            });

        productsList.Add(new()
            {
                Id = 2,
                Name = "Patriot Hat",
                ProductDescription = "A hat that shows your patriotism",
                Price = 18.99,
                IsActive = true,
                ShowProperties = false,
                Styles = Style.TruckerHat,
                Sizes = Size.Large,
                Colors = Color.Blue,
            });

        productsList.Add(new()
            {
                Id = 3,
                Name = "Revolutionary Hat",
                ProductDescription = "A hat that show your willing to stand up to tyranny",
                Price = 21.99,
                IsActive = true,
                ShowProperties = false,
                Styles = Style.Snapback,
                Sizes = Size.Small,
                Colors = Color.White,
            });

        productsList.Add(new()
            {
                Id = 4,
                Name = "MinuteMan Hat",
                ProductDescription = "A hat that shows your are ready to defend your freedom",
                Price = 25.99,
                IsActive = true,
                ShowProperties = false,
                Styles = Style.BucketHat,
                Sizes = Size.Large,
                Colors = Color.Red,
        });
    }

    // private void DeleteProd(int id)
    // {
    //     var product = productsList.Find(x => x.Id == id);
    //     productsList.Remove(product);
    // }

    protected void FavoritesCountChange(bool isFavorite)
    {
        if (isFavorite)
        {
            favoritesCount++;
        } else
        {
            favoritesCount--;
        }
    }

    protected void ProductToDisplay(int id)
    {
        productToDisplay = productsList.Find(x => x.Id == id);
    }

    protected void NavigateToShoppingCart()
    {
        NavigationManager.NavigateTo("/shoppingcart");
    }


}
